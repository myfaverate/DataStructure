package recursion;

import java.util.Arrays;

/**
 * 八皇后问题的答案 一共92种
 * [0, 4, 7, 5, 2, 6, 1, 3]
 * [0, 5, 7, 2, 6, 3, 1, 4]
 * [0, 6, 3, 5, 7, 1, 4, 2]
 * [0, 6, 4, 7, 1, 3, 5, 2]
 * [1, 3, 5, 7, 2, 0, 6, 4]
 * [1, 4, 6, 0, 2, 7, 5, 3]
 * [1, 4, 6, 3, 0, 7, 5, 2]
 * [1, 5, 0, 6, 3, 7, 2, 4]
 * [1, 5, 7, 2, 0, 3, 6, 4]
 * [1, 6, 2, 5, 7, 4, 0, 3]
 * [1, 6, 4, 7, 0, 3, 5, 2]
 * [1, 7, 5, 0, 2, 4, 6, 3]
 * [2, 0, 6, 4, 7, 1, 3, 5]
 * [2, 4, 1, 7, 0, 6, 3, 5]
 * [2, 4, 1, 7, 5, 3, 6, 0]
 * [2, 4, 6, 0, 3, 1, 7, 5]
 * [2, 4, 7, 3, 0, 6, 1, 5]
 * [2, 5, 1, 4, 7, 0, 6, 3]
 * [2, 5, 1, 6, 0, 3, 7, 4]
 * [2, 5, 1, 6, 4, 0, 7, 3]
 * [2, 5, 3, 0, 7, 4, 6, 1]
 * [2, 5, 3, 1, 7, 4, 6, 0]
 * [2, 5, 7, 0, 3, 6, 4, 1]
 * [2, 5, 7, 0, 4, 6, 1, 3]
 * [2, 5, 7, 1, 3, 0, 6, 4]
 * [2, 6, 1, 7, 4, 0, 3, 5]
 * [2, 6, 1, 7, 5, 3, 0, 4]
 * [2, 7, 3, 6, 0, 5, 1, 4]
 * [3, 0, 4, 7, 1, 6, 2, 5]
 * [3, 0, 4, 7, 5, 2, 6, 1]
 * [3, 1, 4, 7, 5, 0, 2, 6]
 * [3, 1, 6, 2, 5, 7, 0, 4]
 * [3, 1, 6, 2, 5, 7, 4, 0]
 * [3, 1, 6, 4, 0, 7, 5, 2]
 * [3, 1, 7, 4, 6, 0, 2, 5]
 * [3, 1, 7, 5, 0, 2, 4, 6]
 * [3, 5, 0, 4, 1, 7, 2, 6]
 * [3, 5, 7, 1, 6, 0, 2, 4]
 * [3, 5, 7, 2, 0, 6, 4, 1]
 * [3, 6, 0, 7, 4, 1, 5, 2]
 * [3, 6, 2, 7, 1, 4, 0, 5]
 * [3, 6, 4, 1, 5, 0, 2, 7]
 * [3, 6, 4, 2, 0, 5, 7, 1]
 * [3, 7, 0, 2, 5, 1, 6, 4]
 * [3, 7, 0, 4, 6, 1, 5, 2]
 * [3, 7, 4, 2, 0, 6, 1, 5]
 * [4, 0, 3, 5, 7, 1, 6, 2]
 * [4, 0, 7, 3, 1, 6, 2, 5]
 * [4, 0, 7, 5, 2, 6, 1, 3]
 * [4, 1, 3, 5, 7, 2, 0, 6]
 * [4, 1, 3, 6, 2, 7, 5, 0]
 * [4, 1, 5, 0, 6, 3, 7, 2]
 * [4, 1, 7, 0, 3, 6, 2, 5]
 * [4, 2, 0, 5, 7, 1, 3, 6]
 * [4, 2, 0, 6, 1, 7, 5, 3]
 * [4, 2, 7, 3, 6, 0, 5, 1]
 * [4, 6, 0, 2, 7, 5, 3, 1]
 * [4, 6, 0, 3, 1, 7, 5, 2]
 * [4, 6, 1, 3, 7, 0, 2, 5]
 * [4, 6, 1, 5, 2, 0, 3, 7]
 * [4, 6, 1, 5, 2, 0, 7, 3]
 * [4, 6, 3, 0, 2, 7, 5, 1]
 * [4, 7, 3, 0, 2, 5, 1, 6]
 * [4, 7, 3, 0, 6, 1, 5, 2]
 * [5, 0, 4, 1, 7, 2, 6, 3]
 * [5, 1, 6, 0, 2, 4, 7, 3]
 * [5, 1, 6, 0, 3, 7, 4, 2]
 * [5, 2, 0, 6, 4, 7, 1, 3]
 * [5, 2, 0, 7, 3, 1, 6, 4]
 * [5, 2, 0, 7, 4, 1, 3, 6]
 * [5, 2, 4, 6, 0, 3, 1, 7]
 * [5, 2, 4, 7, 0, 3, 1, 6]
 * [5, 2, 6, 1, 3, 7, 0, 4]
 * [5, 2, 6, 1, 7, 4, 0, 3]
 * [5, 2, 6, 3, 0, 7, 1, 4]
 * [5, 3, 0, 4, 7, 1, 6, 2]
 * [5, 3, 1, 7, 4, 6, 0, 2]
 * [5, 3, 6, 0, 2, 4, 1, 7]
 * [5, 3, 6, 0, 7, 1, 4, 2]
 * [5, 7, 1, 3, 0, 6, 4, 2]
 * [6, 0, 2, 7, 5, 3, 1, 4]
 * [6, 1, 3, 0, 7, 4, 2, 5]
 * [6, 1, 5, 2, 0, 3, 7, 4]
 * [6, 2, 0, 5, 7, 4, 1, 3]
 * [6, 2, 7, 1, 4, 0, 5, 3]
 * [6, 3, 1, 4, 7, 0, 2, 5]
 * [6, 3, 1, 7, 5, 0, 2, 4]
 * [6, 4, 2, 0, 5, 7, 1, 3]
 * [7, 1, 3, 0, 6, 4, 2, 5]
 * [7, 1, 4, 2, 0, 6, 3, 5]
 * [7, 2, 0, 5, 1, 4, 6, 3]
 * [7, 3, 0, 2, 5, 1, 6, 4]
 */
public class EightQueenProblem {
    int maxSize = 8;
    int count = 0;
    int[] array = new int[maxSize];
    // 八皇后问题 (回溯算法)

    public EightQueenProblem(int maxSize) {
        this.maxSize = maxSize;
    }

    // 放置皇后
    // 特别注意
    public void check(int n) {
        if (n == maxSize) {
            count++;
            this.printArray();
            return;
        }
        // 将皇后放入棋盘，并判断是否冲突
        for (int i = 0; i < maxSize; i++) { // n表示行， i表示列
            // 先把当前这个皇后放在n行i列
            array[n] = i;
            // 判断是否冲突
            if (judge(n)) {
                // 如果不冲突，继续放
                check(n + 1);
            }
            // 如果冲突就将皇后继续往后续n行i+1列摆放，直到不冲突
        }
    }

    public boolean judge(int n) {
        for (int i = 0; i < n; i++) {
            if (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) { // 判断是否在同一列或在同一斜线
                return false;
            }
        }
        return true;
    }

    // 展示结果
    public void printArray() {
        System.out.println(Arrays.toString(this.array));
    }

    public static void main(String[] args) {
        EightQueenProblem eightQueenProblem = new EightQueenProblem(8); // 回溯8!次 4万多次
        eightQueenProblem.check(0);
        System.out.println(eightQueenProblem.count);
    }
}
